from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from all_kb import main_kb
from aiogram.filters import CommandStart, Command, CommandObject
from inline_kbs import ease_link_kb
from aiogram.types import CallbackQuery
from create_bot import  create_qst_inline_kb, questions
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from bot import bot, admins, txt
from filters.is_admin import IsAdmin
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from RAG import RAGSystem

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "‚öôÔ∏è –Ø –¢–û–ö–ê–†–¨ –°–¢–≠–¢–•–≠–ú. –ü–û–ö–ê–ñ–£ –ö–ê–ö –ú–£–ñ–ò–ö–ò –¢–û–ß–ê–¢ –î–ï–¢–ê–õ–ò. üí™\n\n"
        "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–ø–ª–µ–π, —Ç–æ–ª—å–∫–æ —Å—Ç–∞–ª—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –Ω—É–∂–Ω–æ:",
        reply_markup=main_kb(message.from_user.id)
    )


class QuestionState(StatesGroup):
    waiting_for_question = State()


@start_router.message(F.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def get_inline_btn_link(message: Message, state: FSMContext):
    await message.answer(
        'üîß <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n'
        '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! '
        '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ "?"',
        parse_mode='HTML',
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞
    )
    await state.set_state(QuestionState.waiting_for_question)


@start_router.message(QuestionState.waiting_for_question)
async def handle_question(message: Message, state: FSMContext):
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action="typing"):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
        if message.text and "?" in message.text:
            try:
                rag = RAGSystem(txt)
                answer = rag.ask_question(message.text)

                await message.answer(
                    f"üí° <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n{answer}",
                    parse_mode='HTML'
                )

            except Exception as e:
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            finally:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=main_kb(message.from_user.id)
                )
                await state.clear()

        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            await message.answer(
                "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º '?'\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
@start_router.message(Command('cancel'))
@start_router.message(F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_question(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=main_kb(message.from_user.id)
    )



@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=ease_link_kb())

@start_router.message(F.text == 'üìñ –ö—Ç–æ —è')
async def get_inline_btn_link(message: Message):
    await message.answer(
        "<tg-spoiler>‚öôÔ∏è –Ø –¢–û–ö–ê–†–¨ –°–¢–≠–¢–•–≠–ú</tg-spoiler>\n\n"
        "–ü–æ–∫–∞–∂—É –∫–∞–∫ –º—É–∂–∏–∫–∏ —Ç–æ—á–∞—Ç –¥–µ—Ç–∞–ª–∏. –ë–µ–∑ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤.\n\n",
            reply_markup = main_kb(message.from_user.id)
    )

@start_router.message(F.text == "üë§ –ß—Ç–æ —Å–º–æ–≥—É –≤ –±—É–¥—É—â–µ–º?")
async def get_inline_btn_link(message: Message):
    await message.answer(
        "–ù–∞—É—á—É—Å—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Ç–µ–±—è —Ç–µ–∫—Å—Ç",
            reply_markup = main_kb(message.from_user.id)
    )



@start_router.callback_query(F.data == 'back_home')
async def get_home(call: CallbackQuery):
    await call.answer('–ò–¥—É –¥–æ–º–æ–π', show_alert=False)
    await call.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π! üè†",
        reply_markup=main_kb(call.from_user.id)
    )

@start_router.message(Command('faq'))
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏', reply_markup=create_qst_inline_kb(questions))

@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))

@start_router.message(Command(commands=["settings", "about"]))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    command_name = 'settings' if 'settings' in message.text else 'about'
    response = f'–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command_name}'
    if command_args:
        response += f' —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>'
    else:
        response += ' –±–µ–∑ –º–µ—Ç–∫–∏'
    await message.answer(response)



@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'), IsAdmin(admins))
async def process_find_word(message: Message):
    await message.answer('–û, –∞–¥–º–∏–Ω, –∑–¥–∞—Ä–æ–≤–∞! –ê —Ç–µ–±–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è.')


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è", –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')


@start_router.message(Command('test_edit_msg'))
async def cmd_start(message: Message, state: FSMContext):
    # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞ msg
    msg = await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ')

    # –î–æ—Å—Ç–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_id = msg.message_id

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–í –∫–æ–¥–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, ‚Äî —Å—Ç—Ä–æ–∫–∞:

#–º –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await message.answer('<tg-spoiler>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</tg-spoiler>')

    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –µ—â—ë –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, ID –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
    await bot.edit_message_text(text='<b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ!!!</b>', chat_id=message.from_user.id, message_id=msg_id)

